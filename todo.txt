To-do list
----------

- Check what happens to power spectrum if we add one high-mass interloper


+ Check if the curl component really is just numerical (simple test would be doubling the number of pixels)
+ Check what happens if we try to take the Fourier transform of the convergence map
  + Seems like removing the center pixels solves things?
  + Do this again with a more realistic distribution of interlopers!
- See if we can reproduce the effective mass ratio from the convergence maps alone









Old to-do list
--------------

Arthur
+ Figure out fit parameters as a function of redshift
  + (Cagan is working on this -- might have to email Simon Birrer)
+ Investigate how well we can learn multiple subhalo/interloper positions (even 3 is kind of too much)
(- parallelization using MPI? (If we want to use the cluster) -- I think you use MPIPool which is similar to regular Pool)
- total fit, where we adjust main lens parameters at the same time as interloper/subhalo parameters (maybe not necessary)
- fitting interlopers as interlopers with z as a parameter (will this be agonizingly slow?)

+ Use pyswarms to do a particle swarm (I got confused and thought dynesty was particle swarm)
  + Figure out how accurate you can make it for zd > zl and zd < zl
+ Try tNFW instead of NFW
(- Separate out args_to_img function in pso.py)
- Try fitting to multiplane

Near-future directions
+ IMPORTANT: redo my pso_meff making sure that all the interlopers are near the Einstein ring!
  - See notebook for putting points on the lenstronomy images
- Read Hezaveh's paper, and do the analysis on our lenstronomy image. (I'm a bit confused because alpha and kappa are not directly observable)
- Try adjusting masses but fitting to the pixel power spectrum
(- Redo my pso_meff.ipynb but for point masses)
- Try different subhalo masses (1e7 gives ~20 pixels change maximum)


Questions